#!/usr/bin/env python3
"""
Setup script to configure environment variables for ST0CK trading bots
"""
import os
import sys
from pathlib import Path

def setup_secrets():
    """Interactive setup for trading bot secrets"""
    print("=" * 60)
    print("ST0CK Trading Bot Environment Setup")
    print("=" * 60)
    print()
    
    # Check if .env exists
    env_path = Path(".env")
    if env_path.exists():
        print("⚠️  .env file already exists!")
        overwrite = input("Do you want to overwrite it? (y/N): ").lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    print("\nThis script will help you set up your trading bot credentials.")
    print("You'll need your Alpaca API keys for each bot.\n")
    
    # Collect ST0CKA credentials
    print("ST0CKA Bot Configuration:")
    print("-" * 30)
    st0cka_key = input("Enter ST0CKA API Key (or press Enter to skip): ").strip()
    st0cka_secret = input("Enter ST0CKA Secret Key (or press Enter to skip): ").strip()
    
    print("\nST0CKG Bot Configuration:")
    print("-" * 30)
    st0ckg_key = input("Enter ST0CKG API Key (or press Enter to skip): ").strip()
    st0ckg_secret = input("Enter ST0CKG Secret Key (or press Enter to skip): ").strip()
    
    print("\nGeneral Configuration:")
    print("-" * 30)
    
    # Trading mode
    mode = input("Trading mode (paper/live) [default: paper]: ").strip().lower()
    if mode not in ['paper', 'live']:
        mode = 'paper'
    
    base_url = "https://paper-api.alpaca.markets" if mode == 'paper' else "https://api.alpaca.markets"
    
    # Database
    db_url = input("Database URL [default: sqlite:///trading_multi.db]: ").strip()
    if not db_url:
        db_url = "sqlite:///trading_multi.db"
    
    # Initial capital
    capital = input("Initial capital for backtesting [default: 5000]: ").strip()
    if not capital:
        capital = "5000"
    
    # Create .env content
    env_content = f"""# ST0CK Trading Bot Configuration
# Generated by setup_secrets.py

# ST0CKA Bot Credentials
ST0CKAKEY={st0cka_key}
ST0CKASECRET={st0cka_secret}

# ST0CKG Bot Credentials
ST0CKGKEY={st0ckg_key}
ST0CKGSECRET={st0ckg_secret}

# Alpaca Base URL ({mode} trading)
ALPACA_BASE_URL={base_url}

# Database Configuration
DATABASE_URL={db_url}

# Trading Configuration
INITIAL_CAPITAL={capital}
TRADING_MODE={mode}
"""
    
    # Write .env file
    with open(".env", "w") as f:
        f.write(env_content)
    
    print("\n✅ .env file created successfully!")
    print("\nIMPORTANT:")
    print("1. The .env file contains sensitive credentials")
    print("2. It's already in .gitignore so it won't be committed")
    print("3. For GitHub Actions, you need to add these as secrets:")
    print("   - STOCKAKEY (ST0CKA API Key)")
    print("   - ST0CKASECRET (ST0CKA Secret)")
    print("   - STOCKGKEY (ST0CKG API Key)")
    print("   - ST0CKGSECRET (ST0CKG Secret)")
    print("   - DATABASE_URL")
    print("   - ALPACA_BASE_URL")
    
    print("\nTo add GitHub secrets:")
    print("1. Go to your repository on GitHub")
    print("2. Click Settings → Secrets and variables → Actions")
    print("3. Click 'New repository secret' for each value")
    
    # Verify setup
    print("\n" + "=" * 60)
    verify = input("Would you like to verify your setup? (Y/n): ").lower()
    if verify != 'n':
        verify_setup()

def verify_setup():
    """Verify the environment setup"""
    print("\nVerifying setup...")
    
    # Load .env
    from dotenv import load_dotenv
    load_dotenv()
    
    # Check each key
    keys_to_check = [
        ("ST0CKAKEY", "ST0CKA API Key"),
        ("ST0CKASECRET", "ST0CKA Secret"),
        ("ST0CKGKEY", "ST0CKG API Key"),
        ("ST0CKGSECRET", "ST0CKG Secret"),
        ("ALPACA_BASE_URL", "Alpaca Base URL"),
        ("DATABASE_URL", "Database URL")
    ]
    
    all_good = True
    for key, name in keys_to_check:
        value = os.getenv(key)
        if value and value != "your_alpaca_api_key_here" and value != "your_alpaca_secret_key_here":
            print(f"✅ {name}: Set")
        else:
            print(f"❌ {name}: Not set or using placeholder")
            all_good = False
    
    if all_good:
        print("\n✅ All environment variables are configured!")
    else:
        print("\n⚠️  Some variables need to be configured.")
        print("   Run this script again to update them.")

if __name__ == "__main__":
    try:
        setup_secrets()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled.")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Error: {e}")
        sys.exit(1)